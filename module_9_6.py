# Цель: более глубоко понять особенности работы с функциями генераторами и оператором yield в Python.

# Определяем функцию-генератор с именем all_variants
# Она принимает строку text и будет генерировать все возможные подпоследовательности
def all_variants(text):
    # Внешний цикл, который отвечает за длину подпоследовательности
    # Начинаем с длины 1 и постепенно увеличиваем до длины всей строки
    # Например, если строка "abc", то сначала будем генерировать подпоследовательности длины 1,
    # потом длины 2, и наконец, длины 3
    for length in range(1, len(text) + 1):  # Длина варьируется от 1 до длины строки включительно
        # Внутренний цикл, который отвечает за выбор начальной позиции для подпоследовательности
        # Мы начинаем с первой позиции и продолжаем до тех пор, пока подпоследовательность указанной длины
        # может поместиться в строку
        for start in range(len(text) - length + 1):  # Находим возможные позиции для каждой длины
            # Формируем срез строки, который начинается с индекса start и продолжается на length символов
            # Например, если start=0 и length=2 для строки "abc", то срезом будет "ab"
            # Если start=1 и length=2, то срезом будет "bc"
            yield text[start:start + length]  # Используем yield для возврата очередной подпоследовательности

# Теперь создадим пример использования функции all_variants
# В данном примере строка "abc"
a = all_variants("abc")

# Чтобы получить все подпоследовательности, мы можем использовать цикл for для итерирования по генератору
# Каждый раз, когда мы проходим по циклу, генератор возвращает следующую подпоследовательность
for variant in a:
    # Выводим текущую подпоследовательность, которую сгенерировала функция
    print(variant)
