def personal_sum(numbers):
    # Инициализация переменных:
    # result будет хранить сумму корректных чисел
    # incorrect_data - количество некорректных данных
    result = 0
    incorrect_data = 0

    # Перебор каждого элемента коллекции numbers
    for item in numbers:
        try:
            # Пытаемся сложить элемент с result
            # Если это число, оно добавится к result
            result += item
        except TypeError:
            # Если встречаем некорректный тип данных (например, строку вместо числа)
            # Увеличиваем счётчик некорректных данных
            incorrect_data += 1
            # Выводим сообщение с указанием некорректного элемента
            print(f'Некорректный тип данных для подсчёта суммы - {item}')

    # Возвращаем кортеж: сумма чисел и количество некорректных данных
    return result, incorrect_data


def calculate_average(numbers):
    try:
        # Вызов функции personal_sum для подсчёта суммы чисел и количества некорректных данных
        total_sum, incorrect_data = personal_sum(numbers)

        # Количество корректных чисел: общее количество элементов минус количество некорректных данных
        valid_count = len(numbers) - incorrect_data

        # Если нет корректных чисел, вызываем исключение деления на 0
        if valid_count == 0:
            raise ZeroDivisionError

        # Возвращаем среднее арифметическое: сумма корректных чисел делится на их количество
        return total_sum / valid_count

    # Обработка ситуации, когда деление на 0 (нет корректных чисел)
    except ZeroDivisionError:
        return 0  # Возвращаем 0, если в коллекции нет чисел

    # Обработка ситуации, если в функцию передан некорректный тип данных (например, не коллекция, а число)
    except TypeError:
        print('В numbers записан некорректный тип данных')
        return None  # Возвращаем None, если тип данных неверный


# Примеры вызова функций с различными вариантами данных:
# Пример 1: Строка, символы не являются числами
print(f'Результат 1: {calculate_average("1, 2, 3")}')

# Пример 2: Список, где только два элемента - числа
print(f'Результат 2: {calculate_average([1, "Строка", 3, "Ещё Строка"])}')

# Пример 3: Передан не список, а одно число
print(f'Результат 3: {calculate_average(567)}')

# Пример 4: Все элементы списка являются числами
print(f'Результат 4: {calculate_average([42, 15, 36, 13])}')
