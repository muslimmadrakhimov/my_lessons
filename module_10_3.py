#  Цель: освоить блокировки потоков, используя объекты класса Lock и его методы.
#  Задача "Банковские операции":
#  Необходимо создать класс Bank со следующими свойствами:

# Импортируем необходимые модули
import threading  # Модуль для работы с потоками
import random     # Модуль для генерации случайных чисел
import time       # Модуль для работы со временем (для создания задержки)

# Создаем класс Bank, который будет представлять наш банк
class Bank:
    def __init__(self):
        """
        Инициализация объекта Bank:
        - устанавливаем начальный баланс на 0
        - создаем объект блокировки для синхронизации доступа к балансу
        """
        self.balance = 0  # Начальный баланс банка
        self.lock = threading.Lock()  # Объект блокировки для потоков

    def deposit(self):
        """
        Метод deposit отвечает за пополнение баланса.
        Он делает 100 транзакций, каждая из которых увеличивает баланс
        на случайное число от 50 до 500.
        """
        for _ in range(100):  # Цикл, который выполняется 100 раз (100 транзакций пополнения)
            amount = random.randint(50, 500)  # Генерируем случайную сумму пополнения
            # Используем блокировку для защиты доступа к балансу
            with self.lock:  # Входим в критическую секцию с блокировкой
                self.balance += amount  # Увеличиваем баланс на сгенерированную сумму
                print(f"Пополнение: {amount}. Баланс: {self.balance}")  # Выводим текущее состояние баланса

                # Если баланс больше или равен 500 и замок (lock) заблокирован - разблокировать его
                if self.balance >= 500 and self.lock.locked():
                    self.lock.release()  # Освобождаем блокировку, если она была заблокирована

            # Небольшая пауза для имитации времени выполнения транзакции
            time.sleep(0.001)  # Задержка в 0.001 секунды

    def take(self):
        """
        Метод take отвечает за снятие средств с баланса.
        Он делает 100 транзакций, каждая из которых пытается снять случайную сумму от 50 до 500.
        Если на балансе недостаточно средств для снятия, поток блокируется.
        """
        for _ in range(100):  # Цикл, который выполняется 100 раз (100 транзакций снятия)
            amount = random.randint(50, 500)  # Генерируем случайную сумму для снятия
            print(f"Запрос на {amount}")  # Сообщаем о запросе на снятие

            # Используем блокировку для защиты доступа к балансу
            with self.lock:  # Входим в критическую секцию с блокировкой
                if amount <= self.balance:  # Если баланс позволяет снять деньги
                    self.balance -= amount  # Уменьшаем баланс на сгенерированную сумму
                    print(f"Снятие: {amount}. Баланс: {self.balance}")  # Выводим результат снятия
                else:
                    # Если недостаточно средств, выводим сообщение и блокируем поток
                    print("Запрос отклонён, недостаточно средств")
                    self.lock.acquire()  # Блокируем поток, так как средств недостаточно

            # Небольшая пауза для имитации времени выполнения транзакции
            time.sleep(0.001)  # Задержка в 0.001 секунды

# Создаем объект банка (экземпляр класса Bank)
bk = Bank()

# Создаем два потока:
# Первый поток будет заниматься пополнением средств (вызывает метод deposit)
# Второй поток будет заниматься снятием средств (вызывает метод take)
th1 = threading.Thread(target=Bank.deposit, args=(bk,))  # Создаем поток для пополнения
th2 = threading.Thread(target=Bank.take, args=(bk,))     # Создаем поток для снятия

# Запускаем оба потока
th1.start()  # Запускаем поток для пополнения
th2.start()  # Запускаем поток для снятия

# Ожидаем завершения работы потоков
th1.join()  # Ожидаем завершения потока пополнения
th2.join()  # Ожидаем завершения потока снятия

# Выводим итоговый баланс после завершения всех транзакций
print(f'Итоговый баланс: {bk.balance}')
