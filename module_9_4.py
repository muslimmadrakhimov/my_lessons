# Цель: освоить на практике замыкание, объекты-функторы и lambda-функции.

# Задача "Функциональное разнообразие":


# 1. Lambda-функция: сравнение символов в строках

# Исходные строки для сравнения
# В этих строках мы будем сравнивать символы по их позициям
first = 'Мама мыла раму'   # Первая строка
second = 'Рамена мало было' # Вторая строка

# Функция map применяет функцию ко всем парам элементов, взятым из переданных последовательностей (в данном случае - строк).
# Лямбда-функция принимает два аргумента x и y, которые представляют собой символы из строк first и second на одной позиции.
# Лямбда возвращает True, если x и y равны (то есть символы одинаковые), и False - если нет.
result = list(map(lambda x, y: x == y, first, second))

# Результат работы функции map будет объектом map, который нужно преобразовать в список (list).
# Выводим этот список, чтобы увидеть, где символы двух строк совпадают, а где нет.
print(result)

# Ожидаемый вывод: [False, True, True, False, False, False, False, False, True, False, False, False, False, False]

# В результате мы получим список булевых значений (True или False), где:
# True означает, что символы в строках на той же позиции совпадают,
# False - символы не совпадают.

# 2. Замыкание: функция записи данных в файл

# Определим функцию get_advanced_writer, которая будет принимать имя файла, в который мы будем записывать данные.
# Эта функция вернёт другую функцию, которая и будет отвечать за запись данных в этот файл.
def get_advanced_writer(file_name):
    # Внутри определяем другую функцию write_everything, которая принимает произвольное количество аргументов (*data_set).
    # Звёздочка (*) перед параметром data_set означает, что в эту функцию можно передавать любое количество аргументов.
    def write_everything(*data_set):
        # Открываем файл с именем file_name в режиме добавления (режим 'a').
        # Это означает, что новые данные будут добавлены в конец файла, не удаляя предыдущие данные.
        # Указываем кодировку utf-8, чтобы корректно обрабатывать текст с русскими символами.
        with open(file_name, 'a', encoding='utf-8') as file:
            # Проходимся по каждому элементу из переданного набора данных (data_set).
            for data in data_set:
                # Преобразуем каждый элемент в строку (str) и записываем его в файл.
                # '\n' — это символ новой строки, который добавляет перенос после каждой записи.
                file.write(str(data) + '\n')

    # Функция get_advanced_writer возвращает функцию write_everything, которая "запомнила" имя файла.
    return write_everything


# Пример использования замыкания:
# Мы вызываем функцию get_advanced_writer и передаём ей имя файла ('example.txt'), который будет использован для записи.
# Это вернёт нам функцию write, которая уже знает, в какой файл нужно писать данные.
write = get_advanced_writer('example.txt')

# Теперь с помощью функции write мы можем записывать любые данные в файл 'example.txt'.
# В этот раз мы записываем строку и список. Все данные будут добавлены в файл в виде строк.
write('Это строчка', ['А', 'это', 'уже', 'число', 5, 'в', 'списке'])

# В результате, в файле 'example.txt' появится следующее содержимое:
# Это строчка
# ['А', 'это', 'уже', 'число', 5, 'в', 'списке']

# 3. Класс-функтор: использование метода __call__

# Импортируем функцию choice из модуля random.
# Эта функция позволяет выбирать случайный элемент из последовательности (например, списка или кортежа).
from random import choice


# Создаём класс MysticBall, который имитирует магический шар, отвечающий на вопросы случайным образом.
class MysticBall:
    # Метод __init__ инициализирует объект. Он принимает произвольное количество аргументов, представляющих возможные ответы.
    # *words означает, что можно передать любое количество аргументов (слов) при создании объекта.
    def __init__(self, *words):
        # Сохраняем все переданные слова в атрибуте объекта self.words.
        self.words = words

    # Метод __call__ делает объект класса вызываемым как функция.
    # Когда мы вызываем объект MysticBall как функцию, этот метод случайным образом выбирает одно из слов в self.words.
    def __call__(self):
        # Используем функцию choice, чтобы выбрать случайный ответ из списка self.words.
        return choice(self.words)


# Пример использования:
# Создаём объект first_ball, передавая в него несколько вариантов ответов.
first_ball = MysticBall('Да', 'Нет', 'Наверное')

# Теперь можем вызывать объект first_ball как функцию.
# При каждом вызове объект будет возвращать случайный ответ из списка.
print(first_ball())  # Например: "Да"
print(first_ball())  # Например: "Нет"
print(first_ball())  # Например: "Наверное"
