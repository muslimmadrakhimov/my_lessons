# Цель: понять как работают потоки на практике, решив задачу
# Задача "Потоковая запись в файлы":


# Импортируем необходимые модули
import threading  # Модуль для работы с потоками
from time import sleep, time  # Функция sleep для задержки и time для измерения времени


def write_words(word_count, file_name):
    """
    Функция для записи заданного количества слов в файл.

    :param word_count: Количество слов, которые нужно записать в файл.
    :param file_name: Имя файла, в который будет производиться запись.
    """
    # Открываем файл в режиме записи ('w')
    # Если файла не существует, он будет создан.
    with open(file_name, 'w') as f:
        # Цикл для записи слов
        for i in range(1, word_count + 1):  # Перебираем числа от 1 до word_count
            # Формируем строку, которая будет записана в файл
            f.write(f"Какое-то слово № {i}\n")  # Записываем слово в файл
            sleep(0.1)  # Делаем паузу на 0.1 секунды между записями
    # По завершении записи выводим сообщение в консоль
    print(f"Завершилась запись в файл {file_name}")


# Основная программа
if __name__ == "__main__":
    # Начинаем измерение времени для первой части программы
    start_time = time()  # Запоминаем текущее время

    # Вызываем функцию write_words несколько раз с разными параметрами
    # Эти вызовы записывают слова в соответствующие файлы
    write_words(10, 'example1.txt')  # Записываем 10 слов в example1.txt
    write_words(30, 'example2.txt')  # Записываем 30 слов в example2.txt
    write_words(200, 'example3.txt')  # Записываем 200 слов в example3.txt
    write_words(100, 'example4.txt')  # Записываем 100 слов в example4.txt

    # Конец измерения времени для первой части программы
    end_time = time()  # Запоминаем текущее время после выполнения функций

    # Выводим время, затраченное на выполнение функций
    print(f"Работа функций {end_time - start_time:.6f} секунд")  # Выводим разницу времени с точностью до 6 знаков

    # Создаем список для хранения потоков
    threads = []  # Инициализируем пустой список для потоков
    # Список аргументов для создания потоков
    file_args = [
        (10, 'example5.txt'),  # Параметры для первого потока
        (30, 'example6.txt'),  # Параметры для второго потока
        (200, 'example7.txt'),  # Параметры для третьего потока
        (100, 'example8.txt')  # Параметры для четвертого потока
    ]

    # Начинаем измерение времени для второй части программы (потоки)
    start_time_threads = time()  # Запоминаем текущее время перед запуском потоков

    # Создаем и запускаем потоки
    for args in file_args:
        # Создаем поток, передавая функцию write_words и ее аргументы
        thread = threading.Thread(target=write_words, args=args)
        # Добавляем созданный поток в список threads
        threads.append(thread)
        # Запускаем поток
        thread.start()

    # Ожидаем завершения всех потоков
    for thread in threads:
        thread.join()  # Блокируем основной поток, пока текущий поток не завершится

    # Конец измерения времени для второй части программы
    end_time_threads = time()  # Запоминаем текущее время после завершения потоков

    # Выводим время, затраченное на выполнение потоков
    print(f"Работа потоков {end_time_threads - start_time_threads:.6f} секунд")  # Выводим разницу времени с точностью до 6 знаков
