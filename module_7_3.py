import string  # Библиотека string используется для работы с текстом


class WordsFinder:
    def __init__(self, *file_names):
        """
        Конструктор класса. Принимает неограниченное количество файлов в качестве аргументов.
        Сохраняет их в атрибут self.file_names в виде кортежа.
        """
        self.file_names = file_names  # Сохраняем переданные имена файлов

    def get_all_words(self):
        """
        Метод для извлечения всех слов из файлов.
        Возвращает словарь, где ключи — это названия файлов,
        а значения — списки всех слов из этих файлов.
        """
        all_words = {}  # Пустой словарь для хранения всех слов из файлов

        # Определим список пунктуации, которую нужно будет удалить из текста
        punctuations = [',', '.', '=', '!', '?', ';', ':', ' - ']

        # Цикл для перебора всех переданных файлов
        for file_name in self.file_names:
            # Открываем файл с помощью конструкции with (это безопасный способ открытия файлов)
            with open(file_name, 'r', encoding='utf-8') as f:
                text = f.read().lower()  # Читаем файл, переводим текст в нижний регистр

                # Убираем все символы пунктуации из текста
                for p in punctuations:
                    text = text.replace(p, '')  # Заменяем знаки препинания на пустую строку

                # Разбиваем текст на список слов, используя пробел как разделитель
                words = text.split()

                # Записываем полученный список слов в словарь, где ключ — имя файла
                all_words[file_name] = words

        # Возвращаем словарь со всеми словами из файлов
        return all_words

    def find(self, word):
        """
        Метод для поиска первого вхождения заданного слова в файлах.
        Возвращает словарь, где ключ — это название файла,
        а значение — позиция первого вхождения слова (начиная с 1).
        """
        word = word.lower()  # Приводим искомое слово к нижнему регистру для игнорирования регистра
        result = {}  # Словарь для хранения результатов поиска
        all_words = self.get_all_words()  # Получаем все слова из файлов, вызывая метод get_all_words()

        # Цикл для перебора всех файлов и их списков слов
        for name, words in all_words.items():
            try:
                # Ищем первую позицию слова в списке слов
                position = words.index(word)
                result[name] = position + 1  # Возвращаем позицию (прибавляем 1, чтобы начать с 1)
            except ValueError:
                result[name] = None  # Если слово не найдено, записываем None для этого файла

        # Возвращаем словарь с результатами поиска
        return result

    def count(self, word):
        """
        Метод для подсчета количества вхождений заданного слова в файлы.
        Возвращает словарь, где ключ — это название файла,
        а значение — количество вхождений этого слова.
        """
        word = word.lower()  # Приводим искомое слово к нижнему регистру
        result = {}  # Словарь для хранения результатов подсчета
        all_words = self.get_all_words()  # Получаем все слова из файлов

        # Цикл для перебора всех файлов и их списков слов
        for name, words in all_words.items():
            count = words.count(word)  # Подсчитываем количество вхождений слова в списке
            result[name] = count  # Записываем результат для каждого файла

        # Возвращаем словарь с количеством вхождений слова
        return result


# Пример использования программы
# Создаем объект класса WordsFinder, передавая имена файлов
finder = WordsFinder('test_file.txt')

# Вызов метода для получения всех слов из файлов и вывод результата на экран
print(finder.get_all_words())  # Ожидаемый результат: список всех слов в файле

# Вызов метода для поиска первого вхождения слова 'TEXT' и вывод результата на экран
print(finder.find('TEXT'))  # Ожидаемый результат: позиция первого вхождения слова 'TEXT' (игнорируя регистр)

# Вызов метода для подсчета количества вхождений слова 'teXT' и вывод результата на экран
print(finder.count('teXT'))  # Ожидаемый результат: количество вхождений слова 'TEXT' (игнорируя регистр)
