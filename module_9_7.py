# Задание: Декораторы в Python
# Цель задания:
# Освоить механизмы создания декораторов Python.
# Практически применить знания, создав функцию декоратор и обернув ею другую функцию.


# Шаг 1: Функция для проверки, является ли число простым
# Простое число — это число, которое делится только на 1 и на само себя (например, 2, 3, 5, 7).
# Если число делится на что-то еще (например, на 2, 3 и т.д.), то оно составное.

def check_prime(n):
    """
    Эта функция проверяет, является ли число простым.

    Параметр:
    n (int) - число для проверки

    Возвращает:
    True, если число простое, и False, если составное.
    """
    if n <= 1:  # Числа меньше или равные 1 не считаются простыми
        return False

    # Проверяем, делится ли n на любое число от 2 до квадратного корня из n.
    # Если делится, то оно не простое.
    for i in range(2, int(n ** 0.5) + 1):  # int(n ** 0.5) вычисляет квадратный корень числа n
        if n % i == 0:  # Если n делится на i без остатка, то оно составное
            return False

    # Если делителей не нашлось, то число простое
    return True


# Шаг 2: Создаем декоратор, который будет оборачивать функцию
# Декоратор — это функция, которая принимает другую функцию в качестве аргумента,
# модифицирует или расширяет её поведение и возвращает новую функцию.

def is_prime(func):
    """
    Это декоратор, который проверяет, является ли результат функции простым числом.

    Параметр:
    func (function) - функция, которую декорируем

    Возвращает:
    функцию-обертку (wrapper), которая будет проверять результат на простоту
    """

    def wrapper(*args, **kwargs):
        # Вызов оригинальной функции с её аргументами
        result = func(*args, **kwargs)

        # Проверяем, простое ли число
        if check_prime(result):
            print("Простое")  # Выводим "Простое", если число простое
        else:
            print("Составное")  # Выводим "Составное", если число составное

        return result  # Возвращаем результат функции (сумму чисел в нашем случае)

    return wrapper  # Возвращаем функцию-обертку (wrapper), которая будет выполняться вместо оригинальной


# Шаг 3: Функция, которая складывает три числа
# Эта функция просто принимает три числа на вход и возвращает их сумму.
# Мы будем использовать декоратор @is_prime для проверки результата.

@is_prime  # Это строка указывает, что мы используем декоратор is_prime для этой функции
def sum_three(a, b, c):
    """
    Складывает три числа и возвращает результат.

    Параметры:
    a (int) - первое число
    b (int) - второе число
    c (int) - третье число

    Возвращает:
    Сумму трёх чисел
    """
    return a + b + c


# Шаг 4: Пример использования
# Мы вызываем функцию sum_three с тремя аргументами (например, 2, 3 и 6).
# Результат будет проверен на простоту декоратором is_prime.
result = sum_three(2, 3, 6)  # Здесь 2 + 3 + 6 = 11

# Результат работы программы
print(result)  # Выводим результат на экран, это будет 11
